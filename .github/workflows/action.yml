name: Build and Deploy Qt6 Project

on:
  push:
    branches:
      - main

jobs:
  ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version number
        id: extract_version
        run: |
          version=$(grep -Po '(?<=else:VERSION = ).*' VDVGE.pro)
          echo "Extracted version: $version"
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Print extracted version number
        run: |
           echo "VERSION=${{ env.VERSION }}"

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
#          version: '6.*'
#          host: windows
#          target: desktop
#          arch: x64
#          modules: qtbase,qtgui,qtopengl,qtwidgets,qt5compat
          aqtversion: '==3.1.*'
          version: '6.8.0'
          host: 'linux'
          target: 'desktop'
          arch: 'linux_gcc_64'
          modules: 'qt5compat'

      - name: Build RPM package
        run: |
          sudo apt-get install -y rpm
          pwd
          ls -laF
          cd work/VDVGE/VDVGE
          mkdir -p rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS,TMP_SOURCES}
          mv vdvge.spec rpmbuild/SPECS/
          ls -laF rpmbuild/SPECS
          rsync -a --exclude='rpmbuild' /home/runner/work/VDVGE/VDVGE rpmbuild/TMP_SOURCES
          (cd rpmbuild/SOURCES && tar czf vdvge-${{ env.VERSION }}-source.tar.gz -C ../TMP_SOURCES .)
          pwd
          ls -laF rpmbuild/SOURCES
          pwd
          ls -laF rpmbuild/TMP_SOURCES
          rpmbuild -ba rpmbuild/SPECS/vdvge.spec
#          tar czf rpmbuild/SOURCES/vdvge-${{ env.VERSION }}-source.tar.gz *
#          rpmbuild -ba rpmbuild/SPECS/vdvge.spec

      - name: Deploy (Linux)
        run: |
          mv rpmbuild/RPMS/x86_64/vdvge-${{ env.VERSION }}.x86_64.rpm rpmbuild/RPMS/x86_64/vdvge-${{ env.VERSION }}-qt6-linux-x64.rpm
#          scp rpmbuild/RPMS/x86_64/vdvge-${{ env.VERSION }}-qt6-linux-x64.rpm user@yourserver:/path/to/deploy
  
  windows:
    runs-on: windows-2019
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Developer Command Prompt for Microsoft Visual C++
        uses: ilammy/msvc-dev-cmd@v1

      - name: Extract version number
        id: extract_version
        run: |
          $full_version = (Select-String -Path VDVGE.pro -Pattern 'win32:VERSION = (\d+\.\d+\.\d+\.\d+)' | ForEach-Object { $_.Matches[0].Groups[1].Value })
          $version = $full_version -replace '\.\d+$'
          echo "VERSION=$version" >> $env:GITHUB_ENV
#          $full_version = (Select-String -Path VDVGE.pro -Pattern 'win32:VERSION = (\d+\.\d+\.\d+\.\d+)').Matches.Value
#          $version = $full_version -replace '\.\d+$'
#          echo "VERSION=$version" >> $env:GITHUB_ENV

      - name: Print extracted version number
        run: |
           echo "VERSION=${{ env.VERSION }}"

#      - name: Install Visual Studio Build Tools
#        uses: microsoft/setup-msbuild@v2

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
#          version: '6.*'
#          host: windows
#          target: desktop
#          arch: x64
#          modules: qtbase,qtgui,qtopengl,qtwidgets,qt5compat
          aqtversion: '==3.1.*'
          version: '6.8.0'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2022_64'
          modules: 'qt5compat'

      - name: Build project
        run: |
          qmake6 -spec win32-msvc
          nmake
#        shell: cmd
#          "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

      - name: Deploy (Windows)
        run: |
          windeployqt --release build\vdvge.exe
#          powershell Compress-Archive -Path build\* -DestinationPath vdvge-${{ env.VERSION }}-qt6-windows-x64.zip
#          scp vdvge-${{ env.VERSION }}-qt6-windows-x64.zip user@yourserver:/path/to/deploy

#      - name: Compress files (Windows)
#        run: |
#          powershell Compress-Archive -Path build\* -DestinationPath vdvge-${{ env.VERSION }}-qt6-windows-x64.zip
#          scp vdvge-${{ env.VERSION }}-qt6-windows-x64.zip user@yourserver:/path/to/deploy

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: vdvge-${{ env.VERSION }}-qt6-windows-x64
#          name: build-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            build/*
#          *.zip
#            build/*.zip
#            build.zip
#            rpmbuild/RPMS/*
#            build/*.dmg
